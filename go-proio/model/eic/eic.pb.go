// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proio/model/eic.proto

/*
	Package eic is a generated protocol buffer package.

	It is generated from these files:
		proio/model/eic.proto

	It has these top-level messages:
		XYZTInt
		XYZTDouble
		XYZTFloat
		XYZInt
		XYZDouble
		XYZFloat
		Particle
		SimHit
		ReconHit
		UncertContrib
*/
package eic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UncertContrib_DistType int32

const (
	UncertContrib_NORMAL  UncertContrib_DistType = 0
	UncertContrib_UNIFORM UncertContrib_DistType = 1
)

var UncertContrib_DistType_name = map[int32]string{
	0: "NORMAL",
	1: "UNIFORM",
}
var UncertContrib_DistType_value = map[string]int32{
	"NORMAL":  0,
	"UNIFORM": 1,
}

func (x UncertContrib_DistType) String() string {
	return proto.EnumName(UncertContrib_DistType_name, int32(x))
}
func (UncertContrib_DistType) EnumDescriptor() ([]byte, []int) { return fileDescriptorEic, []int{9, 0} }

type XYZTInt struct {
	X int64 `protobuf:"zigzag64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"zigzag64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int64 `protobuf:"zigzag64,3,opt,name=z,proto3" json:"z,omitempty"`
	T int64 `protobuf:"zigzag64,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *XYZTInt) Reset()                    { *m = XYZTInt{} }
func (m *XYZTInt) String() string            { return proto.CompactTextString(m) }
func (*XYZTInt) ProtoMessage()               {}
func (*XYZTInt) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{0} }

func (m *XYZTInt) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZTInt) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZTInt) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *XYZTInt) GetT() int64 {
	if m != nil {
		return m.T
	}
	return 0
}

type XYZTDouble struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	T float64 `protobuf:"fixed64,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *XYZTDouble) Reset()                    { *m = XYZTDouble{} }
func (m *XYZTDouble) String() string            { return proto.CompactTextString(m) }
func (*XYZTDouble) ProtoMessage()               {}
func (*XYZTDouble) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{1} }

func (m *XYZTDouble) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZTDouble) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZTDouble) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *XYZTDouble) GetT() float64 {
	if m != nil {
		return m.T
	}
	return 0
}

type XYZTFloat struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	T float32 `protobuf:"fixed32,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *XYZTFloat) Reset()                    { *m = XYZTFloat{} }
func (m *XYZTFloat) String() string            { return proto.CompactTextString(m) }
func (*XYZTFloat) ProtoMessage()               {}
func (*XYZTFloat) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{2} }

func (m *XYZTFloat) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZTFloat) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZTFloat) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *XYZTFloat) GetT() float32 {
	if m != nil {
		return m.T
	}
	return 0
}

type XYZInt struct {
	X int64 `protobuf:"zigzag64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"zigzag64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int64 `protobuf:"zigzag64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *XYZInt) Reset()                    { *m = XYZInt{} }
func (m *XYZInt) String() string            { return proto.CompactTextString(m) }
func (*XYZInt) ProtoMessage()               {}
func (*XYZInt) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{3} }

func (m *XYZInt) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZInt) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZInt) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type XYZDouble struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *XYZDouble) Reset()                    { *m = XYZDouble{} }
func (m *XYZDouble) String() string            { return proto.CompactTextString(m) }
func (*XYZDouble) ProtoMessage()               {}
func (*XYZDouble) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{4} }

func (m *XYZDouble) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZDouble) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZDouble) GetZ() float64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type XYZFloat struct {
	X float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *XYZFloat) Reset()                    { *m = XYZFloat{} }
func (m *XYZFloat) String() string            { return proto.CompactTextString(m) }
func (*XYZFloat) ProtoMessage()               {}
func (*XYZFloat) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{5} }

func (m *XYZFloat) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *XYZFloat) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *XYZFloat) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Particle struct {
	Parent []uint64 `protobuf:"varint,1,rep,packed,name=parent" json:"parent,omitempty"`
	Child  []uint64 `protobuf:"varint,2,rep,packed,name=child" json:"child,omitempty"`
	Pdg    int32    `protobuf:"zigzag32,3,opt,name=pdg,proto3" json:"pdg,omitempty"`
	// position in mm and time in ns
	Vertex *XYZTDouble `protobuf:"bytes,4,opt,name=vertex" json:"vertex,omitempty"`
	// momentum in GeV
	P *XYZDouble `protobuf:"bytes,5,opt,name=p" json:"p,omitempty"`
	// mass in GeV
	Mass   float64   `protobuf:"fixed64,6,opt,name=mass,proto3" json:"mass,omitempty"`
	Charge float32   `protobuf:"fixed32,7,opt,name=charge,proto3" json:"charge,omitempty"`
	Spin   *XYZFloat `protobuf:"bytes,8,opt,name=spin" json:"spin,omitempty"`
}

func (m *Particle) Reset()                    { *m = Particle{} }
func (m *Particle) String() string            { return proto.CompactTextString(m) }
func (*Particle) ProtoMessage()               {}
func (*Particle) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{6} }

func (m *Particle) GetParent() []uint64 {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Particle) GetChild() []uint64 {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *Particle) GetPdg() int32 {
	if m != nil {
		return m.Pdg
	}
	return 0
}

func (m *Particle) GetVertex() *XYZTDouble {
	if m != nil {
		return m.Vertex
	}
	return nil
}

func (m *Particle) GetP() *XYZDouble {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Particle) GetMass() float64 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Particle) GetCharge() float32 {
	if m != nil {
		return m.Charge
	}
	return 0
}

func (m *Particle) GetSpin() *XYZFloat {
	if m != nil {
		return m.Spin
	}
	return nil
}

type SimHit struct {
	// helper ID to circumvent volume lookup from global position during
	// digitization
	Volumeid uint64 `protobuf:"varint,1,opt,name=volumeid,proto3" json:"volumeid,omitempty"`
	// spatial in mm and time in ns
	Globalprepos *XYZTDouble `protobuf:"bytes,2,opt,name=globalprepos" json:"globalprepos,omitempty"`
	// spatial in mm and time in ns
	Globalpostpos *XYZTDouble `protobuf:"bytes,3,opt,name=globalpostpos" json:"globalpostpos,omitempty"`
	// energy in GeV
	Edep       float32 `protobuf:"fixed32,4,opt,name=edep,proto3" json:"edep,omitempty"`
	Particleid uint64  `protobuf:"varint,5,opt,name=particleid,proto3" json:"particleid,omitempty"`
}

func (m *SimHit) Reset()                    { *m = SimHit{} }
func (m *SimHit) String() string            { return proto.CompactTextString(m) }
func (*SimHit) ProtoMessage()               {}
func (*SimHit) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{7} }

func (m *SimHit) GetVolumeid() uint64 {
	if m != nil {
		return m.Volumeid
	}
	return 0
}

func (m *SimHit) GetGlobalprepos() *XYZTDouble {
	if m != nil {
		return m.Globalprepos
	}
	return nil
}

func (m *SimHit) GetGlobalpostpos() *XYZTDouble {
	if m != nil {
		return m.Globalpostpos
	}
	return nil
}

func (m *SimHit) GetEdep() float32 {
	if m != nil {
		return m.Edep
	}
	return 0
}

func (m *SimHit) GetParticleid() uint64 {
	if m != nil {
		return m.Particleid
	}
	return 0
}

type ReconHit struct {
	Cellid uint64 `protobuf:"varint,1,opt,name=cellid,proto3" json:"cellid,omitempty"`
	// energy in GeV
	Edep float32 `protobuf:"fixed32,2,opt,name=edep,proto3" json:"edep,omitempty"`
	// Repeated uncertainty contributions imply a convolution.
	Edeperr []*UncertContrib `protobuf:"bytes,3,rep,name=edeperr" json:"edeperr,omitempty"`
	// spatial in mm and time in ns
	Pos *XYZTDouble `protobuf:"bytes,4,opt,name=pos" json:"pos,omitempty"`
	// Repeated uncertainty contributions imply a convolution.  For the case
	// where uncertainties are specified in orthogonal directions, the
	// convolution reduces to a product.
	Poserr   []*UncertContrib `protobuf:"bytes,5,rep,name=poserr" json:"poserr,omitempty"`
	Simhitid []uint64         `protobuf:"varint,7,rep,packed,name=simhitid" json:"simhitid,omitempty"`
	// particle IDs responsible for energy deposition (fill only in the absence
	// of corresponding simhitids)
	Particleid []uint64 `protobuf:"varint,6,rep,packed,name=particleid" json:"particleid,omitempty"`
}

func (m *ReconHit) Reset()                    { *m = ReconHit{} }
func (m *ReconHit) String() string            { return proto.CompactTextString(m) }
func (*ReconHit) ProtoMessage()               {}
func (*ReconHit) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{8} }

func (m *ReconHit) GetCellid() uint64 {
	if m != nil {
		return m.Cellid
	}
	return 0
}

func (m *ReconHit) GetEdep() float32 {
	if m != nil {
		return m.Edep
	}
	return 0
}

func (m *ReconHit) GetEdeperr() []*UncertContrib {
	if m != nil {
		return m.Edeperr
	}
	return nil
}

func (m *ReconHit) GetPos() *XYZTDouble {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *ReconHit) GetPoserr() []*UncertContrib {
	if m != nil {
		return m.Poserr
	}
	return nil
}

func (m *ReconHit) GetSimhitid() []uint64 {
	if m != nil {
		return m.Simhitid
	}
	return nil
}

func (m *ReconHit) GetParticleid() []uint64 {
	if m != nil {
		return m.Particleid
	}
	return nil
}

type UncertContrib struct {
	Type UncertContrib_DistType `protobuf:"varint,1,opt,name=type,proto3,enum=proio.model.eic.UncertContrib_DistType" json:"type,omitempty"`
	// Types that are valid to be assigned to Sigma:
	//	*UncertContrib_Scalar
	//	*UncertContrib_Vector
	Sigma isUncertContrib_Sigma `protobuf_oneof:"sigma"`
}

func (m *UncertContrib) Reset()                    { *m = UncertContrib{} }
func (m *UncertContrib) String() string            { return proto.CompactTextString(m) }
func (*UncertContrib) ProtoMessage()               {}
func (*UncertContrib) Descriptor() ([]byte, []int) { return fileDescriptorEic, []int{9} }

type isUncertContrib_Sigma interface {
	isUncertContrib_Sigma()
	MarshalTo([]byte) (int, error)
	Size() int
}

type UncertContrib_Scalar struct {
	Scalar float32 `protobuf:"fixed32,2,opt,name=scalar,proto3,oneof"`
}
type UncertContrib_Vector struct {
	Vector *XYZTFloat `protobuf:"bytes,3,opt,name=vector,oneof"`
}

func (*UncertContrib_Scalar) isUncertContrib_Sigma() {}
func (*UncertContrib_Vector) isUncertContrib_Sigma() {}

func (m *UncertContrib) GetSigma() isUncertContrib_Sigma {
	if m != nil {
		return m.Sigma
	}
	return nil
}

func (m *UncertContrib) GetType() UncertContrib_DistType {
	if m != nil {
		return m.Type
	}
	return UncertContrib_NORMAL
}

func (m *UncertContrib) GetScalar() float32 {
	if x, ok := m.GetSigma().(*UncertContrib_Scalar); ok {
		return x.Scalar
	}
	return 0
}

func (m *UncertContrib) GetVector() *XYZTFloat {
	if x, ok := m.GetSigma().(*UncertContrib_Vector); ok {
		return x.Vector
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UncertContrib) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UncertContrib_OneofMarshaler, _UncertContrib_OneofUnmarshaler, _UncertContrib_OneofSizer, []interface{}{
		(*UncertContrib_Scalar)(nil),
		(*UncertContrib_Vector)(nil),
	}
}

func _UncertContrib_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UncertContrib)
	// sigma
	switch x := m.Sigma.(type) {
	case *UncertContrib_Scalar:
		_ = b.EncodeVarint(2<<3 | proto.WireFixed32)
		_ = b.EncodeFixed32(uint64(math.Float32bits(x.Scalar)))
	case *UncertContrib_Vector:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Vector); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UncertContrib.Sigma has unexpected type %T", x)
	}
	return nil
}

func _UncertContrib_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UncertContrib)
	switch tag {
	case 2: // sigma.scalar
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Sigma = &UncertContrib_Scalar{math.Float32frombits(uint32(x))}
		return true, err
	case 3: // sigma.vector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(XYZTFloat)
		err := b.DecodeMessage(msg)
		m.Sigma = &UncertContrib_Vector{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UncertContrib_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UncertContrib)
	// sigma
	switch x := m.Sigma.(type) {
	case *UncertContrib_Scalar:
		n += proto.SizeVarint(2<<3 | proto.WireFixed32)
		n += 4
	case *UncertContrib_Vector:
		s := proto.Size(x.Vector)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*XYZTInt)(nil), "proio.model.eic.XYZTInt")
	proto.RegisterType((*XYZTDouble)(nil), "proio.model.eic.XYZTDouble")
	proto.RegisterType((*XYZTFloat)(nil), "proio.model.eic.XYZTFloat")
	proto.RegisterType((*XYZInt)(nil), "proio.model.eic.XYZInt")
	proto.RegisterType((*XYZDouble)(nil), "proio.model.eic.XYZDouble")
	proto.RegisterType((*XYZFloat)(nil), "proio.model.eic.XYZFloat")
	proto.RegisterType((*Particle)(nil), "proio.model.eic.Particle")
	proto.RegisterType((*SimHit)(nil), "proio.model.eic.SimHit")
	proto.RegisterType((*ReconHit)(nil), "proio.model.eic.ReconHit")
	proto.RegisterType((*UncertContrib)(nil), "proio.model.eic.UncertContrib")
	proto.RegisterEnum("proio.model.eic.UncertContrib_DistType", UncertContrib_DistType_name, UncertContrib_DistType_value)
}
func (m *XYZTInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTInt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.X)<<1)^uint64((m.X>>63))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.Y)<<1)^uint64((m.Y>>63))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.Z)<<1)^uint64((m.Z>>63))))
	}
	if m.T != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.T)<<1)^uint64((m.T>>63))))
	}
	return i, nil
}

func (m *XYZTDouble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTDouble) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Z))))
	}
	if m.T != 0 {
		dAtA[i] = 0x21
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.T))))
	}
	return i, nil
}

func (m *XYZTFloat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZTFloat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	}
	if m.T != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.T))))
	}
	return i, nil
}

func (m *XYZInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZInt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.X)<<1)^uint64((m.X>>63))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.Y)<<1)^uint64((m.Y>>63))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint64(m.Z)<<1)^uint64((m.Z>>63))))
	}
	return i, nil
}

func (m *XYZDouble) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZDouble) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x19
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Z))))
	}
	return i, nil
}

func (m *XYZFloat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XYZFloat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0xd
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.X))))
	}
	if m.Y != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Y))))
	}
	if m.Z != 0 {
		dAtA[i] = 0x1d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Z))))
	}
	return i, nil
}

func (m *Particle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Particle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Parent) > 0 {
		dAtA2 := make([]byte, len(m.Parent)*10)
		var j1 int
		for _, num := range m.Parent {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintEic(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Child) > 0 {
		dAtA4 := make([]byte, len(m.Child)*10)
		var j3 int
		for _, num := range m.Child {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintEic(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Pdg != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEic(dAtA, i, uint64((uint32(m.Pdg)<<1)^uint32((m.Pdg>>31))))
	}
	if m.Vertex != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Vertex.Size()))
		n5, err := m.Vertex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.P != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.P.Size()))
		n6, err := m.P.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Mass != 0 {
		dAtA[i] = 0x31
		i++
		i = encodeFixed64Eic(dAtA, i, uint64(math.Float64bits(float64(m.Mass))))
	}
	if m.Charge != 0 {
		dAtA[i] = 0x3d
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Charge))))
	}
	if m.Spin != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Spin.Size()))
		n7, err := m.Spin.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *SimHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimHit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Volumeid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Volumeid))
	}
	if m.Globalprepos != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Globalprepos.Size()))
		n8, err := m.Globalprepos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Globalpostpos != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Globalpostpos.Size()))
		n9, err := m.Globalpostpos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Edep != 0 {
		dAtA[i] = 0x25
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Edep))))
	}
	if m.Particleid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Particleid))
	}
	return i, nil
}

func (m *ReconHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReconHit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cellid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Cellid))
	}
	if m.Edep != 0 {
		dAtA[i] = 0x15
		i++
		i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Edep))))
	}
	if len(m.Edeperr) > 0 {
		for _, msg := range m.Edeperr {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintEic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Pos != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Pos.Size()))
		n10, err := m.Pos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Poserr) > 0 {
		for _, msg := range m.Poserr {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintEic(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Particleid) > 0 {
		dAtA12 := make([]byte, len(m.Particleid)*10)
		var j11 int
		for _, num := range m.Particleid {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintEic(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if len(m.Simhitid) > 0 {
		dAtA14 := make([]byte, len(m.Simhitid)*10)
		var j13 int
		for _, num := range m.Simhitid {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintEic(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	return i, nil
}

func (m *UncertContrib) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UncertContrib) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Type))
	}
	if m.Sigma != nil {
		nn15, err := m.Sigma.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn15
	}
	return i, nil
}

func (m *UncertContrib_Scalar) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x15
	i++
	i = encodeFixed32Eic(dAtA, i, uint32(math.Float32bits(float32(m.Scalar))))
	return i, nil
}
func (m *UncertContrib_Vector) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Vector != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEic(dAtA, i, uint64(m.Vector.Size()))
		n16, err := m.Vector.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func encodeFixed64Eic(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Eic(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *XYZTInt) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sozEic(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sozEic(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sozEic(uint64(m.Z))
	}
	if m.T != 0 {
		n += 1 + sozEic(uint64(m.T))
	}
	return n
}

func (m *XYZTDouble) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	if m.T != 0 {
		n += 9
	}
	return n
}

func (m *XYZTFloat) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	if m.T != 0 {
		n += 5
	}
	return n
}

func (m *XYZInt) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sozEic(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sozEic(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sozEic(uint64(m.Z))
	}
	return n
}

func (m *XYZDouble) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Z != 0 {
		n += 9
	}
	return n
}

func (m *XYZFloat) Size() (n int) {
	var l int
	_ = l
	if m.X != 0 {
		n += 5
	}
	if m.Y != 0 {
		n += 5
	}
	if m.Z != 0 {
		n += 5
	}
	return n
}

func (m *Particle) Size() (n int) {
	var l int
	_ = l
	if len(m.Parent) > 0 {
		l = 0
		for _, e := range m.Parent {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Child) > 0 {
		l = 0
		for _, e := range m.Child {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if m.Pdg != 0 {
		n += 1 + sozEic(uint64(m.Pdg))
	}
	if m.Vertex != nil {
		l = m.Vertex.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.P != nil {
		l = m.P.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Mass != 0 {
		n += 9
	}
	if m.Charge != 0 {
		n += 5
	}
	if m.Spin != nil {
		l = m.Spin.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	return n
}

func (m *SimHit) Size() (n int) {
	var l int
	_ = l
	if m.Volumeid != 0 {
		n += 1 + sovEic(uint64(m.Volumeid))
	}
	if m.Globalprepos != nil {
		l = m.Globalprepos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Globalpostpos != nil {
		l = m.Globalpostpos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if m.Edep != 0 {
		n += 5
	}
	if m.Particleid != 0 {
		n += 1 + sovEic(uint64(m.Particleid))
	}
	return n
}

func (m *ReconHit) Size() (n int) {
	var l int
	_ = l
	if m.Cellid != 0 {
		n += 1 + sovEic(uint64(m.Cellid))
	}
	if m.Edep != 0 {
		n += 5
	}
	if len(m.Edeperr) > 0 {
		for _, e := range m.Edeperr {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if m.Pos != nil {
		l = m.Pos.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	if len(m.Poserr) > 0 {
		for _, e := range m.Poserr {
			l = e.Size()
			n += 1 + l + sovEic(uint64(l))
		}
	}
	if len(m.Particleid) > 0 {
		l = 0
		for _, e := range m.Particleid {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	if len(m.Simhitid) > 0 {
		l = 0
		for _, e := range m.Simhitid {
			l += sovEic(uint64(e))
		}
		n += 1 + sovEic(uint64(l)) + l
	}
	return n
}

func (m *UncertContrib) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEic(uint64(m.Type))
	}
	if m.Sigma != nil {
		n += m.Sigma.Size()
	}
	return n
}

func (m *UncertContrib_Scalar) Size() (n int) {
	var l int
	_ = l
	n += 5
	return n
}
func (m *UncertContrib_Vector) Size() (n int) {
	var l int
	_ = l
	if m.Vector != nil {
		l = m.Vector.Size()
		n += 1 + l + sovEic(uint64(l))
	}
	return n
}

func sovEic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEic(x uint64) (n int) {
	return sovEic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XYZTInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.X = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Y = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Z = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.T = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTDouble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTDouble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTDouble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Z = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.T = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZTFloat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZTFloat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZTFloat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.T = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.X = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Y = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Z = int64(v)
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZDouble) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZDouble: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZDouble: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Y = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Z = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XYZFloat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XYZFloat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XYZFloat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.X = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Y = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Z = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Particle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Particle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Particle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Parent = append(m.Parent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Parent = append(m.Parent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Child = append(m.Child, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Child = append(m.Child, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pdg", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Pdg = v
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vertex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vertex == nil {
				m.Vertex = &XYZTDouble{}
			}
			if err := m.Vertex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.P == nil {
				m.P = &XYZDouble{}
			}
			if err := m.P.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Mass = float64(math.Float64frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charge", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Charge = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spin == nil {
				m.Spin = &XYZFloat{}
			}
			if err := m.Spin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volumeid", wireType)
			}
			m.Volumeid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Volumeid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalprepos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalprepos == nil {
				m.Globalprepos = &XYZTDouble{}
			}
			if err := m.Globalprepos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Globalpostpos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Globalpostpos == nil {
				m.Globalpostpos = &XYZTDouble{}
			}
			if err := m.Globalpostpos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Edep = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Particleid", wireType)
			}
			m.Particleid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Particleid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReconHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReconHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReconHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cellid", wireType)
			}
			m.Cellid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cellid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edep", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Edep = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edeperr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edeperr = append(m.Edeperr, &UncertContrib{})
			if err := m.Edeperr[len(m.Edeperr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pos == nil {
				m.Pos = &XYZTDouble{}
			}
			if err := m.Pos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poserr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poserr = append(m.Poserr, &UncertContrib{})
			if err := m.Poserr[len(m.Poserr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Particleid = append(m.Particleid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Particleid = append(m.Particleid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Particleid", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Simhitid = append(m.Simhitid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Simhitid = append(m.Simhitid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Simhitid", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UncertContrib) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UncertContrib: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UncertContrib: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (UncertContrib_DistType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scalar", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Sigma = &UncertContrib_Scalar{float32(math.Float32frombits(v))}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &XYZTFloat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Sigma = &UncertContrib_Vector{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEic   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proio/model/eic.proto", fileDescriptorEic) }

var fileDescriptorEic = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xc7, 0xe7, 0x24, 0x4d, 0xfb, 0x3b, 0xdd, 0x7e, 0x0c, 0x0b, 0x50, 0x18, 0x52, 0x35, 0x85,
	0x0b, 0x7a, 0xb3, 0x54, 0x74, 0x03, 0x21, 0x71, 0x81, 0xf6, 0x87, 0x69, 0x93, 0xd8, 0x86, 0xcc,
	0x26, 0x6d, 0xbd, 0x4b, 0x1d, 0xab, 0xb5, 0x94, 0xd4, 0x96, 0xe3, 0x4d, 0xeb, 0xae, 0x79, 0x03,
	0x6e, 0x78, 0x24, 0xc4, 0x15, 0x0f, 0xc0, 0x05, 0x1a, 0x2f, 0x82, 0xec, 0x64, 0x5d, 0x33, 0x26,
	0xb6, 0x5e, 0xd5, 0x5f, 0xf7, 0xf8, 0x73, 0xce, 0xf9, 0x1e, 0xc7, 0xf0, 0x58, 0x2a, 0xc1, 0x45,
	0x27, 0x13, 0x09, 0x4b, 0x3b, 0x8c, 0xd3, 0x48, 0x2a, 0xa1, 0x05, 0x7e, 0x60, 0xb7, 0x23, 0xbb,
	0x1d, 0x31, 0x4e, 0xc3, 0x75, 0xa8, 0x1f, 0x9f, 0xf4, 0x0e, 0x77, 0x47, 0x1a, 0xcf, 0x03, 0x3a,
	0x0f, 0xd0, 0x32, 0x6a, 0x63, 0x82, 0xce, 0x8d, 0x1a, 0x07, 0x4e, 0xa1, 0xc6, 0x46, 0x5d, 0x04,
	0x6e, 0xa1, 0x2e, 0x8c, 0xd2, 0x81, 0x57, 0x28, 0x1d, 0x6e, 0x01, 0x18, 0xc4, 0x96, 0x38, 0xed,
	0xa7, 0xec, 0x9a, 0x82, 0x2a, 0x14, 0x54, 0xa1, 0xa0, 0x0a, 0x05, 0x19, 0xca, 0x26, 0xfc, 0x67,
	0x28, 0xdb, 0xa9, 0x88, 0xa7, 0x4a, 0x71, 0x2a, 0x10, 0xa7, 0x02, 0x71, 0x2a, 0x10, 0xc7, 0x40,
	0xba, 0xe0, 0x1f, 0x9f, 0xf4, 0x66, 0x6a, 0x26, 0x7c, 0x65, 0x13, 0xcf, 0x5a, 0x7d, 0xb8, 0x06,
	0x8d, 0xe3, 0x93, 0xde, 0x8c, 0xe5, 0x86, 0x9f, 0x1d, 0x68, 0x7c, 0x8c, 0x95, 0xe6, 0x34, 0x65,
	0xf8, 0x09, 0xf8, 0x32, 0x56, 0x6c, 0xa4, 0x03, 0xb4, 0xec, 0xb6, 0x3d, 0x52, 0x2a, 0xfc, 0x08,
	0x6a, 0x74, 0xc8, 0xd3, 0x24, 0x70, 0xec, 0x76, 0x21, 0xf0, 0x22, 0xb8, 0x32, 0x19, 0x58, 0xd4,
	0x43, 0x62, 0x96, 0x78, 0x15, 0xfc, 0x33, 0xa6, 0x34, 0x3b, 0xb7, 0x06, 0x34, 0xbb, 0xcf, 0xa2,
	0x1b, 0xd3, 0x8d, 0xae, 0xe7, 0x42, 0xca, 0x50, 0xdc, 0x06, 0x24, 0x83, 0x9a, 0x8d, 0x5f, 0xba,
	0x2d, 0xbe, 0x0c, 0x47, 0x12, 0x63, 0xf0, 0xb2, 0x38, 0xcf, 0x03, 0xdf, 0xb6, 0x6c, 0xd7, 0xa6,
	0x64, 0x3a, 0x8c, 0xd5, 0x80, 0x05, 0x75, 0xdb, 0x52, 0xa9, 0xf0, 0x0a, 0x78, 0xb9, 0xe4, 0xa3,
	0xa0, 0x61, 0xc1, 0x4f, 0x6f, 0x03, 0x5b, 0xab, 0x88, 0x0d, 0x0b, 0x7f, 0x22, 0xf0, 0x3f, 0xf1,
	0x6c, 0x87, 0x6b, 0xbc, 0x04, 0x8d, 0x33, 0x91, 0x9e, 0x66, 0x8c, 0x27, 0xd6, 0x42, 0x8f, 0x4c,
	0x34, 0x7e, 0x07, 0xf3, 0x83, 0x54, 0xf4, 0xe3, 0x54, 0x2a, 0x26, 0x45, 0x6e, 0x4d, 0xbd, 0xa3,
	0xcd, 0xca, 0x01, 0xbc, 0x0e, 0x0b, 0xa5, 0x16, 0xb9, 0x36, 0x04, 0xf7, 0x6e, 0x42, 0xf5, 0x84,
	0x71, 0x81, 0x25, 0x4c, 0x96, 0x77, 0xcc, 0xae, 0x71, 0x0b, 0x40, 0x96, 0x43, 0xe4, 0x89, 0x35,
	0xd3, 0x23, 0x53, 0x3b, 0xe1, 0x17, 0x07, 0x1a, 0x84, 0x51, 0x31, 0x32, 0x0d, 0x1a, 0xcb, 0x58,
	0x9a, 0x4e, 0xda, 0x2b, 0xd5, 0x04, 0xec, 0x4c, 0x81, 0xdf, 0x40, 0xdd, 0xfc, 0x32, 0xa5, 0x02,
	0x77, 0xd9, 0x6d, 0x37, 0xbb, 0xad, 0xbf, 0x2a, 0x3d, 0x1a, 0x51, 0xa6, 0xf4, 0xa6, 0x18, 0x69,
	0xc5, 0xfb, 0xe4, 0x2a, 0x1c, 0xaf, 0x80, 0x6b, 0xfa, 0xbb, 0xc7, 0x45, 0x30, 0x71, 0xf8, 0x35,
	0xf8, 0x52, 0xe4, 0x26, 0x4f, 0xed, 0x5e, 0x79, 0xca, 0xe8, 0x1b, 0x9d, 0xfb, 0xf6, 0x7e, 0x4e,
	0xed, 0x98, 0x69, 0xe6, 0x3c, 0x1b, 0x72, 0xcd, 0x93, 0xa0, 0x6e, 0xff, 0x9d, 0xe8, 0xf0, 0x3b,
	0x82, 0x85, 0x0a, 0x15, 0xbf, 0x05, 0x4f, 0x8f, 0x25, 0xb3, 0xc6, 0xfc, 0xdf, 0x7d, 0xf1, 0xef,
	0x1a, 0xa2, 0x2d, 0x9e, 0xeb, 0xc3, 0xb1, 0x64, 0xc4, 0x1e, 0xc2, 0x01, 0xf8, 0x39, 0x8d, 0xd3,
	0x58, 0x15, 0x0e, 0xee, 0xcc, 0x91, 0x52, 0xe3, 0x35, 0xf3, 0x5d, 0x50, 0x2d, 0x54, 0x39, 0xee,
	0x5b, 0xef, 0x79, 0xf1, 0xd2, 0x98, 0x53, 0x45, 0x6c, 0xf8, 0x1c, 0x1a, 0x57, 0x19, 0x30, 0x80,
	0xbf, 0x7f, 0x40, 0xf6, 0xd6, 0x3f, 0x2c, 0xce, 0xe1, 0x26, 0xd4, 0x8f, 0xf6, 0x77, 0xb7, 0x0f,
	0xc8, 0xde, 0x22, 0xda, 0xa8, 0x43, 0x2d, 0xe7, 0x83, 0x2c, 0xde, 0x38, 0xfa, 0x76, 0xd9, 0x42,
	0x3f, 0x2e, 0x5b, 0xe8, 0xd7, 0x65, 0x0b, 0x7d, 0xfd, 0xdd, 0x9a, 0x83, 0xe6, 0x54, 0x92, 0x0d,
	0xf7, 0x3d, 0xa7, 0xbd, 0x97, 0x03, 0xae, 0x87, 0xa7, 0xfd, 0x88, 0x8a, 0xac, 0x93, 0x30, 0xca,
	0xfb, 0x2c, 0xa5, 0x42, 0x48, 0xa6, 0x3a, 0xc5, 0xe3, 0x3c, 0x10, 0x2b, 0x37, 0x5e, 0xe9, 0xbe,
	0x6f, 0x9f, 0xe9, 0xd5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0x3c, 0x42, 0xb6, 0xbf, 0x05,
	0x00, 0x00,
}
